(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{85:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return u}));var r=a(3),s=a(7),n=(a(0),a(116)),o={title:"usePrefersDarkMode"},i={unversionedId:"apis/trakas-react/use-prefers-dark-mode",id:"apis/trakas-react/use-prefers-dark-mode",isDocsHomePage:!1,title:"usePrefersDarkMode",description:"Thanks to useMedia, we can easily define a hook that allow us to query",source:"@site/docs/apis/trakas-react/use-prefers-dark-mode.mdx",slug:"/apis/trakas-react/use-prefers-dark-mode",permalink:"/docs/apis/trakas-react/use-prefers-dark-mode",editUrl:"https://github.com/trakas/trakas/edit/main/packages/trakas-docs/docs/apis/trakas-react/use-prefers-dark-mode.mdx",version:"current",sidebar:"docs",previous:{title:"useMedia",permalink:"/docs/apis/trakas-react/use-media"}},c=[{value:"Options",id:"options",children:[{value:"Returns",id:"returns",children:[]}]}],d={toc:c};function u(e){var t=e.components,a=Object(s.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Thanks to ",Object(n.b)("a",{parentName:"p",href:"/docs/apis/trakas-react/use-media"},"useMedia"),", we can easily define a hook that allow us to query\n",Object(n.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"},"prefers-color-scheme")," through an\noperating system setting. So that, we can indicate that whether the current system is preferred the\n",Object(n.b)("a",{parentName:"p",href:"https://csspoint101.com/the-ultimate-guide-to-dark-mode/#What_is_Dark_mode"},"dark mode")," or not."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="ThemeSetting.jsx"',title:'"ThemeSetting.jsx"'},'import { useLocalStorage, usePrefersDarkMode } from "@trakas/react";\n\nexport function ThemeSetting() {\n  const prefersDarkMode = usePrefersDarkMode();\n  const defaultTheme = prefersDarkMode ? "dark" : "light";\n  const [theme, setTheme, clearTheme] = useLocalStorage("theme", defaultTheme);\n\n  const handleChangeTheme = (e) => {\n    setTheme(e.target.value);\n  };\n\n  return (\n    <div>\n      <select value={theme} onChange={handleChangeTheme}>\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n      </select>\n      <button onClick={clearTheme}>Reset Theme</button>\n      <div>Theme (localStorage): {JSON.stringify(localStorage.getItem("theme"))}</div>\n    </div>\n  );\n}\n')),Object(n.b)("h2",{id:"options"},"Options"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-jsx"},"const prefersDarkMode = usePrefersDarkMode();\n")),Object(n.b)("h3",{id:"returns"},"Returns"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"prefersDarkMode: boolean"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Whether the current system is preferred the ",Object(n.b)("a",{parentName:"li",href:"https://csspoint101.com/the-ultimate-guide-to-dark-mode/#What_is_Dark_mode"},"dark mode")," or not")))))}u.isMDXComponent=!0}}]);